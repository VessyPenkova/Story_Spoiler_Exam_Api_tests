{
	"info": {
		"_postman_id": "fa25b1f0-7236-4b65-970c-6defb3d61620",
		"name": "Story_Spoiler_Exam",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21002954",
		"_collection_link": "https://galactic-crescent-233468.postman.co/workspace/Team-Workspace~6f66157a-f56a-4a94-8beb-2c29a868354e/collection/21002954-fa25b1f0-7236-4b65-970c-6defb3d61620?action=share&source=collection_link&creator=21002954"
	},
	"item": [
		{
			"name": "1.2  Login and Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Login and Aothentication 01. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json(); \r",
							"\r",
							"\r",
							"pm.test(\"Test Login and Aothentication 02. Response body has property 'accessToken' \", function() {\r",
							"    pm.expect(responseData).to.have.property('accessToken');// Check if the 'accessToken' property exists\r",
							"});\r",
							"pm.collectionVariables.set('accessToken', responseData.accessToken);//setting 'accessToken'\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"userName\": \"veselina\",\r\n\"password\": \"veselina76\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/User/Authentication",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"User",
						"Authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.3.\tCreate a New Story Spoiler",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomNumber = Math.floor(Math.random() * 1000);\r",
							"\r",
							"var randomTitle = 'Title :' + randomNumber;\r",
							"\r",
							"pm.collectionVariables.set('randomTitle', randomTitle)\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Create 01. Status code Succseful creation with status code 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();  // Accessing response as JSON instead of text\r",
							"\r",
							"pm.test(\"Test Create 02. Title Response body property 'Title' has value title'\", function() {\r",
							"    pm.expect(responseData.title).to.eql(pm.collectionVariables.get(\"title\")); // Ensure that the response description is equal to the collection variable description\r",
							"});\r",
							"\r",
							"pm.test(\"Test Create 03. Description Response body property 'Description' has value equal to 'storyDescription'\", function() {\r",
							"    pm.expect(responseData.description).to.eql(pm.collectionVariables.get(\"description\")); // Ensure that the response description is equal to the collection variable description\r",
							"});\r",
							"\r",
							"pm.test(\"Test Create 04.  Message Response body property 'Message' exist\", function() {\r",
							"    pm.expect(responseData).to.have.property('msg'); // Ensure that the response has the property 'msg'\r",
							"});\r",
							"\r",
							"pm.test(\"Test Create 05. Message Response body property 'Message' is not empty\", function() {\r",
							"    pm.expect(responseData.msg).to.not.be.empty; // Ensure that the response message is not empty\r",
							"});\r",
							"\r",
							"pm.test(\"Test Create 06. Message Response body property 'Message' has value equal to 'Successfully created!'\", function() {\r",
							"    pm.expect(responseData.msg).to.eql('Successfully created!'); // Ensure that the response message is 'Successfully created!'\r",
							"});\r",
							"\r",
							"pm.test(\"Test Create 07. Response body has storyId\", () => {\r",
							"    pm.expect(responseData).to.have.property(\"storyId\"); // Ensure that the response has the property 'storyId'\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"storyId\", pm.response.json().storyId);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"{{randomTitle}}\",\r\n\"description\": \"Decription for the story with the: {{randomTitle}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/Story/Create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Story",
						"Create"
					]
				},
				"description": "\nThis endpoint makes an HTTP POST request to create a new story. The request should include a payload with the raw request body type containing the \"title\" and \"description\" of the story.\n\n### Request Body\n- title (text, required): The title of the story.\n- description (text, required): The description of the story.\n\n### Response\n- Status: 404\n- Content-Type: text/xml\n\nThe response does not include any specific data.\n"
			},
			"response": []
		},
		{
			"name": "1.4.\tSearch for the Created Story Spoiler by Title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Search 01. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test Search 02. Response type to be Array\", function() {\r",
							"    pm.expect(responseData).to.be.an(\"array\"); // Ensure that response type is Array.\r",
							"});\r",
							"\r",
							"pm.test(\"Test Search 03. Response type to not be empty with more then 0 items\", function() {\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0); // Ensure that response Array is not empthy.\r",
							"});\r",
							"\r",
							"pm.test(\"Test Search 04. Response should contains story we searched for\", () => {\r",
							"    const randomTitle = pm.collectionVariables.get(\"randomTitle\");\r",
							"    pm.expect(responseData[0].title).to.eql(randomTitle);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/Story/Search?keyword={{randomTitle}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Story",
						"Search"
					],
					"query": [
						{
							"key": "keyword",
							"value": "{{randomTitle}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.5.\tEdit the Created Story Spoiler",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Edit 01. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseData = pm.response.json(); \r",
							"\r",
							"pm.test(\"Test Edit 02. Message Response body property 'Message' exist\", function() {\r",
							"    pm.expect(responseData).to.have.property('msg'); // Ensure that the variable 'Message' exist\r",
							"});\r",
							"pm.test(\"Test Edit 03. Message Response body property 'Message' is not empty\", function() {\r",
							"    pm.expect(responseData.msg).to.not.be.empty; // Ensure that the variable 'Message' is not empty.\r",
							"});\r",
							"pm.test(\"Test Edit 04. Message Response body property 'Message' has value equal to 'Successfully created!'\", function() {\r",
							"    pm.expect(responseData.msg).to.be.eq('Successfully edited'); // Ensure that the variable 'Message' has value equal to 'Successfully edited'\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"string\", \r\n\"description\": \"string\", \r\n\"url\": \"\"\r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/Story/Edit/{{storyId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Story",
						"Edit",
						"{{storyId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.6. Delete the Edited Story Spoiler",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Delete 01. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseText = pm.response.text(); \r",
							"\r",
							"const responceLenght = responseText.length;\r",
							"\r",
							"pm.test(\"Test Delete 02. Response type to be String\", function() {\r",
							"    pm.expect(responseText).is.a(\"string\"); // Ensure that response type is String.\r",
							"});\r",
							"\r",
							"pm.test(\"Test Delete 03. Response type to not be empty\", function() {\r",
							"    pm.expect(responceLenght).to.be.greaterThan(0); // Ensure that response is not String empthy.\r",
							"});\r",
							"\r",
							"pm.test(\"Test Delete 04. Response body property 'Message' has value equal to 'Deleted successfully!'\", function() {\r",
							"    pm.expect(responseText).to.contain('Deleted successfully!'); // Ensure that the response message is 'Deleted successfully!'\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/Story/Delete/{{storyId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Story",
						"Delete",
						"{{storyId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://d5wfqm7y6yb3q.cloudfront.net",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "storyId",
			"value": ""
		}
	]
}